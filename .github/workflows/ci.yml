name: CI Build

on:
  workflow_dispatch:
  
  pull_request:
    branches: [master]
  push:
    branches: [master]

jobs:

  format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install -y clang-format
      - name: Run clang-format check
        run: |
          clang-format --dry-run --Werror $(find src tests -name '*.cpp' -o -name '*.h')

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build clang cmake libglfw3-dev libglm-dev libx11-dev libxrandr-dev libxi-dev libxxf86vm-dev libxcursor-dev libxinerama-dev libwayland-dev wayland-protocols libxkbcommon-dev
      - name: Build
        run: |
          ./build.sh --tidy --test --debug # debug mode
          ./build.sh --tidy --test # release mode

  build-windows-clang:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install dependencies
        run: |
          echo "Installing Ninja and CMake..."
          choco install ninja cmake -y

          echo "FORCE installing LLVM v19.1.0 to overwrite cached version..."
          # Use --force to ensure the correct version is installed over the pre-existing one.
          choco install llvm --version=19.1.0 --force -y

          echo "Adding LLVM to GITHUB_PATH..."
          echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          echo "--- VERIFICATION STEP ---"
          echo "Verifying clang version from the updated PATH:"
          # This should now correctly report version 19.1.0
          clang --version
          echo "-------------------------"
      - name: Build
        shell: cmd
        run: |
          build.bat --tidy --test --debug # debug mode
          build.bat --tidy --test # release mode

  build-windows-msvc:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up MSVC Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |
          choco install ninja cmake -y
      - name: Build with MSVC
        shell: cmd
        run: |
          build.bat --tidy --test --debug --msvc # debug mode
          build.bat --tidy --test --msvc # release mode

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install dependencies
        run: |
          brew update
          brew install ninja cmake glfw glm
      - name: Build
        run: |
          ./build.sh --tidy --test --debug # debug mode
          ./build.sh --tidy --test # release mode
